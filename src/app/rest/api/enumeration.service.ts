/**
 * Registration System API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { EnumerationItemDTO } from '../model/enumeration-item-dto';
// @ts-ignore
import { GenericErrorDTO } from '../model/generic-error-dto';
// @ts-ignore
import { GetEnumItems200ResponseInner } from '../model/get-enum-items200-response-inner';
// @ts-ignore
import { PlaceDTO } from '../model/place-dto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class EnumerationRestService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param enumName 
     * @param enumerationItemDTOPlaceDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEnumItem(enumName: 'REG_EVENT_CONDITION_TYPE' | 'REG_EVENT_DISCOUNT_TYPE' | 'REG_EVENT_TYPE' | 'REG_PLACE' | 'REG_RELATION' | 'REG_SHIRT_SIZE', enumerationItemDTOPlaceDTO: EnumerationItemDTO | PlaceDTO, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<GetEnumItems200ResponseInner>>;
    public createEnumItem(enumName: 'REG_EVENT_CONDITION_TYPE' | 'REG_EVENT_DISCOUNT_TYPE' | 'REG_EVENT_TYPE' | 'REG_PLACE' | 'REG_RELATION' | 'REG_SHIRT_SIZE', enumerationItemDTOPlaceDTO: EnumerationItemDTO | PlaceDTO, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<GetEnumItems200ResponseInner>>>;
    public createEnumItem(enumName: 'REG_EVENT_CONDITION_TYPE' | 'REG_EVENT_DISCOUNT_TYPE' | 'REG_EVENT_TYPE' | 'REG_PLACE' | 'REG_RELATION' | 'REG_SHIRT_SIZE', enumerationItemDTOPlaceDTO: EnumerationItemDTO | PlaceDTO, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<GetEnumItems200ResponseInner>>>;
    public createEnumItem(enumName: 'REG_EVENT_CONDITION_TYPE' | 'REG_EVENT_DISCOUNT_TYPE' | 'REG_EVENT_TYPE' | 'REG_PLACE' | 'REG_RELATION' | 'REG_SHIRT_SIZE', enumerationItemDTOPlaceDTO: EnumerationItemDTO | PlaceDTO, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (enumName === null || enumName === undefined) {
            throw new Error('Required parameter enumName was null or undefined when calling createEnumItem.');
        }
        if (enumerationItemDTOPlaceDTO === null || enumerationItemDTOPlaceDTO === undefined) {
            throw new Error('Required parameter enumerationItemDTOPlaceDTO was null or undefined when calling createEnumItem.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/enumerations/name/${this.configuration.encodeParam({name: "enumName", value: enumName, in: "path", style: "simple", explode: false, dataType: "'REG_EVENT_CONDITION_TYPE' | 'REG_EVENT_DISCOUNT_TYPE' | 'REG_EVENT_TYPE' | 'REG_PLACE' | 'REG_RELATION' | 'REG_SHIRT_SIZE'", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<GetEnumItems200ResponseInner>>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: enumerationItemDTOPlaceDTO,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param enumName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEnumItems(enumName: 'REG_EVENT_CONDITION_TYPE' | 'REG_EVENT_DISCOUNT_TYPE' | 'REG_EVENT_TYPE' | 'REG_PLACE' | 'REG_RELATION' | 'REG_SHIRT_SIZE', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<GetEnumItems200ResponseInner>>;
    public getEnumItems(enumName: 'REG_EVENT_CONDITION_TYPE' | 'REG_EVENT_DISCOUNT_TYPE' | 'REG_EVENT_TYPE' | 'REG_PLACE' | 'REG_RELATION' | 'REG_SHIRT_SIZE', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<GetEnumItems200ResponseInner>>>;
    public getEnumItems(enumName: 'REG_EVENT_CONDITION_TYPE' | 'REG_EVENT_DISCOUNT_TYPE' | 'REG_EVENT_TYPE' | 'REG_PLACE' | 'REG_RELATION' | 'REG_SHIRT_SIZE', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<GetEnumItems200ResponseInner>>>;
    public getEnumItems(enumName: 'REG_EVENT_CONDITION_TYPE' | 'REG_EVENT_DISCOUNT_TYPE' | 'REG_EVENT_TYPE' | 'REG_PLACE' | 'REG_RELATION' | 'REG_SHIRT_SIZE', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (enumName === null || enumName === undefined) {
            throw new Error('Required parameter enumName was null or undefined when calling getEnumItems.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/enumerations/name/${this.configuration.encodeParam({name: "enumName", value: enumName, in: "path", style: "simple", explode: false, dataType: "'REG_EVENT_CONDITION_TYPE' | 'REG_EVENT_DISCOUNT_TYPE' | 'REG_EVENT_TYPE' | 'REG_PLACE' | 'REG_RELATION' | 'REG_SHIRT_SIZE'", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<GetEnumItems200ResponseInner>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNames(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<string>>;
    public getNames(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<string>>>;
    public getNames(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<string>>>;
    public getNames(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*' | 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            '*/*',
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/enumerations/administrated`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<string>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
